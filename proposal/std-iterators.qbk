[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2013, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[std_clause tree.proposal.iterators..24..Iterators library [label iterators]]

[std_clause lib.iterator.synopsis..24.3..Headers =<iterator>= synopsis [label lib.iterator.synopsis]]

[note Insert after section introduced with `// 24.6.5, range access:`]

``
// 24.7, linear order traversal iterators
namespace preorder {
  template <class Cursor> class iterator;

  template <class Cursor>
    bool operator==(
      const iterator<Cursor>& x,
      const iterator<Cursor>& y);

  template <class Cursor>
    bool operator!=(
      const iterator<Cursor>& x,
      const iterator<Cursor>& y);
} // namespace preorder   

namespace postorder {
  template <class Cursor> class iterator;

  template <class Cursor>
  bool operator==(
    const iterator<Cursor>& x,
    const iterator<Cursor>& y);

  template <class Cursor>
  bool operator!=(
    const iterator<Cursor>& x,
    const iterator<Cursor>& y);
} // namespace postorder   

namespace inorder {
  template <class Cursor> class iterator;

  template <class Cursor>
  bool operator==(
    const iterator<Cursor>& x,
    const iterator<Cursor>& y);

  template <class Cursor>
  bool operator!=(
    const iterator<Cursor>& x,
    const iterator<Cursor>& y);
} // namespace inorder
``

[std_endclause lib.iterator.synopsis]

[include std-cursors.qbk]

[include std-iterators-order.qbk]

[std_endclause tree.proposal.iterators]
