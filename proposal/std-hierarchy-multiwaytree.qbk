[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2013, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:multiwaytree Template class =multiway_tree= [label multiwaytree]]

[section:defn =multiway_tree= definition [label multiwaytree.defn]]

[std_par]
A =multiway_tree= is a kind of mutable multiway hierarchy that is
instantiated with a mutable plain hierarchy whose value type in turn is a
container holding elements of =multiway_tree='s =value_type=.

``
namespace std {
  template <class T, class Hierarchy = nary_tree< std::vector<T> > >
  class multiway_tree
  {
  public:
    typedef Hierarchy                                     hierarchy_type;

  protected:
    Hierachy h;

  public:
    // types:
    typedef typename Hierachy::reference                  reference;
    typedef typename Hierachy::const_reference            const_reference;
    typedef implementation_defined                        cursor;
    typedef implementation_defined                        const_cursor;
    typedef typename Hierachy::size_type                  size_type;
    typedef typename Hierachy::difference_type            difference_type;
    typedef T                                             value_type;
    typedef typename Hierachy::pointer                    pointer;
    typedef typename Hierachy::const_pointer              const_pointer;

    template <class U> struct rebind {
      typedef multiway_tree< U,
        typename Hierachy::template rebind< implementation defined >::other >
          other;
    };

    // construct/copy/destroy:
    explicit multiway_tree(const Hierachy&);
    explicit multiway_tree(Hierachy&& = Hierachy());
    template <class InputCursor>
      multiway_tree (InputCursor subtree);
    multiway_tree(const multiway_tree<value_type, Hierachy>&);
    multiway_tree(multiway_tree&&)
    ~multiway_tree();
    multiway_tree<value_type, Hierachy>&
      operator=(const multiway_tree<value_type, Hierachy>&);
    template <class InputCursor>
      void assign(InputCursor subtree);

    // cursors:
    cursor        root();
    const_cursor  croot() const;
    cursor        shoot();
    const_cursor  cshoot() const;
    cursor        inorder_first();
    const_cursor  inorder_cfirst const();

    // capacity:
    bool      empty() const;
    size_type size() const;
    size_type max_size() const;
    size_type capacity(cursor position) const;
    void      reserve(cursor position, size_type n);

    // modifiers:
    cursor    insert(cursor position, const value_type&);
    cursor    insert(cursor position, value_type&& x = value_type());
    template <class InputCursor>
      cursor  insert(cursor position, InputCursor subtree);
    void      rotate(cursor position);
    void      swap(multiway_tree<value_type, Hierachy>&);
    void      clear(cursor position);
    void      clear();
  };

  template <class T, class Hierarchy>
    bool operator==(  multiway_tree<T, Hierarchy> const& x,
                      multiway_tree<T, Hierarchy> const& y);
  template <class T, class Hierarchy>
    bool operator!=(  multiway_tree<T, Hierarchy> const& x,
                      multiway_tree<T, Hierarchy> const& y);

  // specialized algorithms:
  template <class T, class Hierarchy>
    void swap(  multiway_tree<T, Hierarchy>& x,
                multiway_tree<T, Hierarchy>& y);

  namespace inorder {
  template <class T, class Hierarchy>
    inorder::iterator<multiway_tree<T, Hierarchy>::cursor>
      begin(multiway_tree<T, Hierarchy>& h);
  template <class T, class Hierarchy>
    inorder::iterator<multiway_tree<T, Hierarchy>::const_cursor>
      cbegin(multiway_tree<T, Hierarchy> const& h);
  } // namespace inorder
  
} // namespace std
``
[std_end]

Types `typename Hierarchy::cursor` and `typename Hierarchy::const_cursor` are
required to be random access cursors.

[endsect] [/defn]

[section:types =multiway_tree= types [label multiwaytree.types]]

[std_def]
``
	typedef implementation_defined                        cursor;
	typedef implementation_defined                        const_cursor;
``
[std_end]

[std_spec]
Both =cursor= and =const_cursor= have to fulfill the plain cursor
requirements ([cursor.flavors]). If `typename hierarchy_type::cursor` is an
ascending random access cursor, =cursor= and =const_cursor= are also ascending
random access cursors ([ascending.random.access.cursors]); otherwise, they are
descending random access cursor ([descending.random.access.cursors]).
[std_end]

[std_spec]
/Notes:/ The operational semantics of the adaptor cursor are as follows in
terms of the adaptee cursor (only valid if present in the adaptor cursor's
category; only given for mutable versions of expressions, const ones as
according; expressions missing from the list mean operational semantics and
complexity are for =m= as they are for =n=):

[table:table7 Multiway/nary tree cursor operational semantics correspondences
	[[ adaptor cursor =m= ] [ adaptee cursor =n= ] [ complexity ]]
	[[ `*m` ] [ `*((p->begin())[b.parity()])` ] [ constant ]]
]
[std_end]

[endsect] [/types]


[section:cons =multiway_tree= constructors, copy, and assignment [label multiwaytree.cons]]

[std_def]
``
    explicit multiway_tree(const Hierachy&);
    explicit multiway_tree(Hierachy&& = Hierachy());
    template <class InputCursor>
      multiway_tree (InputCursor subtree);
    multiway_tree(const multiway_tree<value_type, Hierachy>&);
    multiway_tree(multiway_tree&&)
``
[std_end]

[std_spec]
/Complexity:/ The constructor
`template <class InputCursor> multiway_tree(InputCursor subtree)` makes only =N=
calls to the copy constructor of =T= (where =N= is the number of elements in
=subtree=) and no reallocations if the cursor =subtree= is of (either
descending or ascending) forward, bidirectional, or random access categories.
It does at most =2N= calls to the copy constructor of =T= and =logN=
reallocations if they are just cursors, since it is impossible to determine
the size of =subtree= and then do copying.
[std_end]

[std_def]
``
	template <class InputCursor>
	  void assign(InputCursor subtree);
``
[std_end]

[std_spec]
/Effects:/

``
clear();
for(InputCursor i = subtree.begin(); i != subtree.end(); ++i)
  insert(root.end(), *i);
``
[std_end]

[endsect] [/cons]


[section:cursors =multiway_tree= cursors [label multiwaytree.cursors]]

[std_def]
``
	cursor        shoot();
	const_cursor  cshoot() const;
``
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[std_def]
``
	cursor        inorder_first();
	const_cursor  inorder_cfirst() const;
``
[std_end]

[std_spec]
/Returns:/ A cursor to the =multiway_tree='s first element in inorder
(see [order.iterators]).
[std_end]

[std_spec]
/Complexity:/ constant.
[std_end]

[endsect] [/cursors]


[section:capacity =multiway_tree= capacity [label multiwaytree.capacity]]

[std_def]
``
	size_type capacity(cursor position) const;
``
[std_end]

[std_spec]
/Returns:/ The total number of child elements that the cursor =position= can
hold without requiring reallocation.
[std_end]

[std_def]
``
	void reserve(cursor position, size_type n);
``
[std_end]

[std_spec]
/Effects:/ A directive that informs an =multiway_tree= of a planned change in
a given cursor's size, so that it can manage the storage allocation
accordingly. After `reserve(position, n)`, `capacity(position)` is greater or
equal to the =size_type= argument =n= of reserve if reallocation happens; and
equal to the previous value of `capacity(position)` otherwise. Reallocation
happens at this point if and only if the current capacity is less than the
=size_type= argument =n= of `reserve()`.
[std_end]

[std_spec]
/Complexity:/ It does not change the size of the =multiway_tree= and takes at
most linear time in `position.size()`.
[std_end]

[std_spec]
/Notes:/ Reallocation invalidates all the references, pointers, and cursors
referring to the child elements of =position=. It is guaranteed that no
reallocation takes place during insertions to =position= that happen after a
call to `reserve()` until the time when an insertion would make
`position.size()` greater than the size specified in the most recent call to
`reserve()`.
[std_end]

[endsect] [/capacity]


[section:modifiers =multiway_tree= modifiers [label multiwaytree.modifiers]]

[std_def]
``
    cursor    insert(cursor position, const value_type&);
    cursor    insert(cursor position, value_type&& x = value_type());
    template <class InputCursor>
      cursor  insert(cursor position, InputCursor subtree);
``
[std_end]

[std_spec]
/Notes:/ Does not affect the validity of cursors and references.
[std_end]

[std_def]
``
	void      clear(cursor position);
``
[std_end]

[std_spec]
/Notes:/ Invalidates only the cursors and references to the erased elements.
[std_end]

[endsect] [/modifiers]


[section:special =multiway_tree= specialized algorithms [label multiwaytree.special]]

[std_def]
``
	template <class T, class Hierarchy>
	  void swap(  multiway_tree<T, Hierarchy>& x,
	              multiway_tree<T, Hierarchy>& y);
``
[std_end]

[std_spec]
/Effects:/ `x.swap(y);`
[std_end]

[std_def]
``
	namespace inorder {
	  template <class T, class Hierarchy>
	    inorder::iterator<multiway_tree<T, Hierarchy>::cursor>
	      begin(multiway_tree<T, Hierarchy>& h);
	} // namespace inorder
``
[std_end]

[std_spec]
/Returns:/ `inorder::iterator<multiway_tree<T, Hierarchy>::cursor>(h.inorder_first())`.
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[std_def]
``
	namespace inorder {
	  template <class T, class Hierarchy>
	    inorder::iterator<multiway_tree<T, Hierarchy>::const_cursor>
	      cbegin(multiway_tree<T, Hierarchy> const& h);
	} // namespace inorder
``
[std_end]

[std_spec]
/Returns:/ `inorder::iterator<multiway_tree<T, Hierarchy>::const_cursor>(h.inorder_cfirst())`.
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[endsect] [/special]


[endsect] [/multiwaytree]
