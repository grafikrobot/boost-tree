[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2013, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[std_clause tree.proposal.containers..23..Container library [label containers]]

[std_section tree.proposal.hierarchy..7..Hierarchy containers [label hierarchy]]

[section:req Hierarchy containers requirements [label hierarchy.req]]

In this section's tables, =X= denotes a hierarchy class, =a= denotes a value of
=X= containing elements of type =T=, =c= denotes a valid, non-on-top cursor
satisfying input cursor requirements, =p= denotes a valid, non-on-top cursor to =a=,
=q= denotes a valid, dereferenceable cursor to =a=, =t= denotes an lvalue or a
const rvalue of =X::value_type=, and =rv= denotes a non-const rvalue of
=X::value_type=. =Args= denotes a template parameter pack; =args= denotes a function
parameter pack with the pattern =Args&&=.

[section:general General hierarchy requirements [label hier.req.general]]

[std_req]
A hierarchy is an object that stores a finite set of objects, all of the same
type, in a hierarchical manner, i.e. as a rooted ordered connected acyclic graph.
Hierarchies introduce a cursor concept for navigation instead of iterators. The
library provides two kinds of native hierarchies: =binary_tree=, and =nary_tree=,
along with hierarchy-yielding hierarchy adaptors =forest_tree=, and =multiway_tree=.
[std_end]

[std_req]
Hierarchy containers conform to the requirements of Containers
(\[container.requirements\]), except that the expressions in Table 1 are
not required to be valid, where =a= and =b= denote values of a type =X=, and =X= is a
hierarchy container class:

[table:table1 Container requirements that are not required for hierarchy containers
	[[unsupported expression]]
	[[[^X::iterator]]]
	[[[^X::const_iterator]]]
	[[[^X::difference_type]]]
	[[[^a.begin()]]]
	[[[^a.end()]]]
	[[[^a.cbegin()]]]
	[[[^a.cend()]]]
	[[[^a == b]]]
	[[[^a != b]]]
	
	[[[^X::reverse_iterator]]]
	[[[^X::const_reverse_iterator]]]
	[[[^a.rbegin()]]]
	[[[^a.rend()]]]
	[[[^a.crbegin()]]]
	[[[^a.crend()]]]
	
	[[[^a < b]]]
	[[[^a > b]]]
	[[[^a <= b]]]
	[[[^a >= b]]]
	]
[std_end]

Non-constant complexity requirements in this clause are stated in one of a number of
possible different ways: unless specified otherwise, they are expressed in terms of
the number of operations =n=, which stands for the total number of elements in the
hierarchy; in some cases, however, they are stated in terms of another value.

[std_req]
[table:table2 Hierarchy requirements (in addition to container)
	[
	[expression]
	[return type]
	[assertion/note[br]pre/post-condition]
	[complexity]
	]
	[
	[[^X::cursor]]
	[cursor type pointing to =T=]
	[any cursor category]
	[compile time]
	]
	[
	[[^X::const_cursor]]
	[cursor type pointing to =const T=]
	[any cursor category]
	[compile time]
	]
	[
	[[^a.root()]]
	[=cursor= for mutable =a=; [br] =const_cursor= for constant =a=]
	[__nbsp__]
	[constant]
	]
	[
	[[^a.croot()]]
	[=const_cursor=]
	[__nbsp__]
	[constant]
	]
	[
	[[^a.shoot()]]
	[=cursor= for mutable =a=; [br] =const_cursor= for constant =a=]
	[__nbsp__]
	[(Note A)]
	]
	[
	[[^a.cshoot()]]
	[=const_cursor=]
	[__nbsp__]
	[(Note A)]
	]
	[
	[[^typename X::template rebind<U>::other]]
	[=Y=]
	[For all =U= (including =T=), =Y::template rebind<T>::other= is =X=.]
	[compile time]
	]
]

Notes: Those entries marked "(Note A)" shall have at worst linear complexity.
See the individual hierarchy containers for specific complexity.
[std_end]

[std_req]
=root()= and =croot()= return a cursor which is the on-top value for the hierarchy.
=shoot()= and =cshoot()= return a cursor which is the past-the-end value that is
found one past the hierarchy's rightmost element. If the hierarchy is empty, then
[^root() == shoot();]
[std_end]

[std_req]
Copy constructors for all hierarchy types defined in this clause copy the allocator
argument from their respective first parameters. All other constructors for these
hierarchy types take an =Allocator&= argument (20.6.9). A copy of this argument is
used for any memory allocation performed, by these constructors and by all member
functions, during the lifetime of each hierarchy object. In all hierarchy types
defined in this clause, the member =get_allocator()= returns a copy of the =Allocator=
object used to construct the hierarchy.
[std_end]

[std_req]
The member class template =rebind= in the table above is effectively a typedef
template: if the name =Hierarchy= is bound to =SomeHierarchy<T>=, then
=Hierarchy::rebind<U>::other= is the same type as =SomeHierarchy<U>=.
Additionally, because of the related assertion, given =SomeHierarchy<T,R0,...,Rn>=
for all template arguments present is bound to the name =Hierarchy=, then
=Hierarchy::rebind<U>::other= is the same type as =SomeHierarchy<U,S0,...,Sn>=
such that the types =S0= through =Sn= are the same as =R0= through =Rn=,
respectively, when =U= is the same type as =T=.
[std_end]

[std_req]
A hierarchy satisfying the requirements shown in Table 3 is called a /mutable
hierarchy/.

[table:table3 Mutable hierarchy requirements
	[
	[expression]
	[return type]
	[assertion/note [br] pre/post-condition]
	[complexity]
	]
	
	[
	[ `a.emplace(p, args);` ]
	[ =cursor= ]
	[ /Requires:/ =T= is =EmplaceConstructable= into X from =args=,
		T is also =MoveInsertable= into =X= and =MoveAssignable=. [br]
		/Effects:/ Inserts an object of type =T= constructed with
		`std::forward<Args>(args)...` before =p=.]
	[ (Note A) ]
	]
	
	[
	[ `a.insert(p,t)` ]
	[ =cursor= ]
	[ /Requires:/ =T= shall be =CopyInsertable= into =X=.
		/Effects:/ Inserts a copy of =t= before =p=. ]
	[ (Note A) ]
	]
	
	[
	[ `a.insert(p,rv)` ]
	[ =cursor= ]
	[ /Requires:/ =T= shall be =MoveInsertable= into =X=.
		/Effects:/ Inserts a copy of =rv= before =p=. ]
	[ (Note A) ]
	]
	
	[
	[ `a.clear(q)` ]
	[ =void= ]
	[ /Effects:/ Deletes the subtree of =q= and the element =q= points to. [br]
		pre: =q= is dereferenceable. ]
	[ Shall be at worst linear in the the number of elements in the subtree
		of =q= plus the distance to =q='s parent's =end()=. ]
	]
	
	[
	[ `a.clear()` ]
	[ =void= ]
	[ /Effects:/ `while (a.size()) clear(a.begin());` [br]
		post: `a.size() == 0` ]
	[ (Note A) ]
	]
]

Notes: Those entries marked "(Note A)" shall have at worst linear complexity. See
the individual hierarchy containers for specific complexity.
[std_end]

[std_req]
The cursor returned from `a.insert(p, t)` points to the copy of =t= inserted into =a=.
Its parent cursor is the same as that of =p=.
[std_end]

[std_req]
The cursor returned from `a.insert(p, rv)` points to the copy of =rv= inserted into =a=.
Its parent cursor is the same as that of =p=.
[std_end]

[std_req]
The cursor returnd from `a.emplace(p, args)` points to the new element constructed
from =args= into =a=. Its parent cursor is the same as that of =p=.
[std_end]

[endsect] [/general]

[endsect] [/req]


[section:plain Plain hierarchies [label hierarchy.plain]]

[std_req]
A hierarchy is called a /plain hierarchy/ if its =cursor= and =const_cursor= types
satisfy the requirements of a plain cursor.
[std_end]

[std_req]
The library provides one native kind of plain hierarchy, =nary_tree=, and a
hierarchy adaptor that in turn yields a plain hierarchy, =forest_tree=.
[std_end]

[std_req]
For a mutable plain hierarchy, the following expressions as shown in Table 4, are
additionally required to be valid:

[table:table4 Plain hierarchy requirements
	[
	[ expression ]
	[ return type ]
	[ assertion/note [br] pre/post-condition ]
	[ complexity ]
	]
	
	[
	[ `a.insert(p,c)` ]
	[ =cursor= ]
	[ /Requires:/ =T= shall be =CopyInsertable= into =X= [br]
		/Effects:/ Inserts a copy of the subtree of =c= before =p=. [br]
		pre: =c= is dereferenceable. ]
	[ Shall be at worst linear in the number of elements in the subtree of
		=c= plus the distance to =p='s parent's =end()=. ]
	]
	
	[
	[ `a.insert_above(p,t)` ]
	[ =cursor= ]
	[ /Requires:/ =T= shall be =CopyInsertable= into =X= [br]
		/Effects:/ Inserts a copy of =t= as a child of =p='s parent;
		the new child becomes new parent of =p= and its siblings. [br]
		pre: =p= is dereferenceable. ]
	[ Linear in the number =p='s siblings. ]
	]
	
	[
	[ `a.insert_above(p,rv)` ]
	[ =cursor= ]
	[ /Requires:/ =T= shall be =MoveInsertable= into =X=.
		/Effects:/ Inserts a copy of =rv= as a child of =p='s parent;
		the new child becomes the parent of =p= and its siblings. [br]
		pre: =p= is dereferenceable. ]
	[ Linear in the number =p='s siblings. ]
	]
]
[std_end]

[std_req]
The cursor returned from =a.insert(p,c)= points to the copy of the element that
=c= points to, inserted into =a=. Its parent cursor is the same as that of =p=.
[std_end]

[endsect] [/plain]

[section:multiway Multiway hierarchies [label hierarchy.multiway]]

[std_req]
A hierarchy is called a /multiway hierarchy/ if its =cursor= and =const_cursor=
types satisfy the requirements of a multiway cursor.
[std_end]

[std_req]
The library provides one native kind of multiway hierarchy, =binary_tree=, and a
hierarchy adaptor that in turn yields a multiway hierarchy, =multiway_tree=.
[std_end]

[std_req]
For a mutable multiway hierarchy, the semantics of some expressions from Table 3
are modified as shown in Table 5.

[table:table5 Multiway hierarchy requirements
	[
	[ expression ]
	[ return type ]
	[ assertion/note [br] pre/post-condition ]
	[ complexity ]
	]
	
	[
	[ `a.clear(q)` ]
	[ =void= ]
	[ Deletes the subtree of =q=.[br]
		If =q= is dereferenceable, the expression also deletes the element =q=
			points to. [br]
		If =q= is past-the-end, the expression deletes the element =q='s predecessor
			points to. [br]
		If after either of these steps =q= has only a non-empty past-the-end child,
			that child's children become =q='s children instead. Finally, that child
			is deleted. [br]
		pre: =q= is internal.]
	[ Shall be at worst linear in the the number of elements in the subtree of
	 	=c= plus the distance to =p='s parent's =end()=.]
	]
	]
[std_end]

[endsect] [/multiway]

[section:tree Trees [label hierarchy.tree]]

[std_req]
Headers =<binary_tree>=, and =<nary_tree>=
define template classes that meet the requirements for hierarchies.

[*Header =<binary_tree>= synopsis]

``
namespace std {
  template <class T, class Allocator = std::allocator<T> > class binary_tree;

  template <class T, class Allocator>
    bool operator==(const binary_tree<T, Allocator>&, const binary_tree<T, Allocator>&);
  template <class T, class Allocator>
    bool operator!=(const binary_tree<T, Allocator>&, const binary_tree<T, Allocator>&);
  template <class T, class Allocator>
    void swap(binary_tree<T, Allocator>&, binary_tree<T, Allocator>&);
  namespace inorder {
  template <class T, class Allocator>
    inorder::iterator<binary_tree<T, Allocator>::cursor>
      begin(binary_tree<T, Allocator>&);
  template <class T, class Allocator>
    inorder::iterator<binary_tree<T, Allocator>::const_cursor>
      cbegin(const binary_tree<T, Allocator>&);
  } // namespace inorder

} // namespace std
``

[*Header =<nary_tree>= synopsis]

``
namespace std {
  template <class T, class Allocator = std::allocator<T> > class nary_tree;

  template <class T, class Allocator>
    bool operator==(const nary_tree<T, Allocator>&, const nary_tree<T, Allocator>&);
  template <class T, class Allocator>
    bool operator!=(const nary_tree<T, Allocator>&, const nary_tree<T, Allocator>&);
  template <class T, class Allocator>
    void swap(nary_tree<T, Allocator>&, nary_tree<T, Allocator>&);
  namespace inorder {
  template <class T, class Allocator>
    inorder::iterator<binary_tree<T, Allocator>::cursor>
      begin(binary_tree<T, Allocator>&);
  template <class T, class Allocator>
    inorder::iterator<binary_tree<T, Allocator>::const_cursor>
      cbegin(const binary_tree<T, Allocator>&);
  } // namespace inorder
} // namespace std
``

[std_end]

[include std-hierarchy-bintree.qbk]
[include std-hierarchy-narytree.qbk]

[section:adaptors Hierarchy adaptors [label hierarchy.adaptors]]

[section:general In general [label hiearchy.adaptors.general]]

Hierarchy adaptors each take a =Hierarchy= template parameter, and each of
their constructors takes a =Hierarchy= reference argument. This hierarchy is
copied into the =Hierarchy= member of each adapter. Most hierarchy adaptors
satisfy most of the hierarchy requirements (except for anything that deals
with allocators, as storage management is done by the adaptees). The exception
is the group of balancing hierarchy adaptors ([hierarchy.balance]), whose
members satisfy most of the requirements of a container, of a sequence and
most of the optional sequence requirements instead (again except for anything
allocation related, and some other exceptions).

[std_par]

Headers =<forest_tree>=, and =<multiway_tree>=
define template classes that meet the requirements for hierarchies.

[*Header =forest_tree= synopsis]

``
namespace std {
  template <class T, class Hierarchy = binary_tree<T> > class forest_tree;

  template <class T, class Hierarchy>
    bool operator==(const forest_tree<T, Hierarchy>&, const forest_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const forest_tree<T, Hierarchy>&, const forest_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    void swap(forest_tree<T, Hierarchy>&, forest_tree<T, Hierarchy>&);
  namespace inorder {
  template <class T, class Hierarchy>
    inorder::iterator<forest_tree<T, Hierarchy>::cursor>
      begin(forest_tree<T, Hierarchy>&);
  template <class T, class Allocator>
    inorder::iterator<forest_tree<T, Hierarchy>::const_cursor>
      cbegin(const forest_tree<T, Hierarchy>&);
  } // namespace inorder
} // namespace std
``

[*Header =multiway_tree= synopsis]

``
namespace std {
  template <class T, class Hierarchy = nary_tree< std::vector<T> > >
    class multiway_tree;

  template <class T, class Hierarchy>
    bool operator==(
      const multiway_tree<T, Hierarchy>&, const multiway_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(
      const multiway_tree<T, Hierarchy>&, const multiway_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    void swap(multiway_tree<T, Hierarchy>&, multiway_tree<T, Hierarchy>&);
  namespace inorder {
  template <class T, class Hierarchy>
    inorder::iterator<multiway_tree<T, Hierarchy>::cursor>
      begin(multiway_tree<T, Hierarchy>&);
  template <class T, class Allocator>
    inorder::iterator<multiway_tree<T, Hierarchy>::const_cursor>
      cbegin(const multiway_tree<T, Hierarchy>&);
  } // namespace inorder
} // namespace std
``

[std_end]

[endsect] [/general]

[include std-hierarchy-foresttree.qbk]
[include std-hierarchy-multiwaytree.qbk]
[include std-hierarchy-augment.qbk]
[include std-hierarchy-balance.qbk]

[endsect] [/adaptors]

[endsect] [/tree]

[std_endsect hierarchy]

[std_endclause containers]
