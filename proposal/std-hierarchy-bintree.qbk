[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2013, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:bintree Class template =binary_tree=  [label hierarchy.bintree]]

[section:overview Class template =binary_tree= overview [label bintree.overview]]

A =binary_tree= is a kind of hierarchy that satisfies multiway hierarchy
requirements. Additionally, it supports (inorder-invariant) cursor rotation.
Descriptions are provided here only for operations on =binary_tree= that are
not described in one of these tables or for operations where there is
additional semantic information.

``
namespace std {
  template <class T, class Allocator = std::allocator<T> >
  class binary_tree {
  public:
    // types:
    typedef value_type&                                   reference;
    typedef const value_type&                             const_reference;
    typedef implementation_defined                        cursor;
    typedef implementation_defined                        const_cursor;
    typedef implementation_defined                        size_type;
    typedef implementation_defined                        difference_type;
    typedef T                                             value_type;
    typedef Allocator                                     allocator_type;
    typedef typename allocator_traits<Allocator>::pointer              pointer;
    typedef typename allocator_traits<Allocator>::const_pointer        const_pointer;

    template <class U> struct rebind {
      typedef binary_tree< U, typename Allocator::template rebind<U>::other >
        other;
    };

    // construct/copy/destroy:
    explicit binary_tree(const Allocator& = Allocator());
    template <class InputCursor>
      binary_tree(InputCursor subtree,
        const Allocator& = Allocator());
    binary_tree(const binary_tree&);
    binary_tree(binary_tree&&);
    binary_tree(const binary_tree&, const Allocator&);
    binary_tree(binary_tree&&, const Allocator&);
    ~binary_tree();
    binary_tree& operator=(const binary_tree&);
    binary_tree& operator=(binary_tree&&);
    template <class InputCursor> void assign(InputCursor subtree);
    Allocator get_allocator() const noexcept;

    // cursors:
    cursor        root() noexcept;
    const_cursor  root() const noexcept;
    const_cursor  croot() const noexcept;
    cursor        shoot() noexcept;
    const_cursor  shoot() const noexcept;
    const_cursor  cshoot() const noexcept;
    cursor        inorder_first() noexcept;
    const_cursor  inorder_first() const noexcept;
    const_cursor  inorder_cfirst() const noexcept;

    // capacity:
    bool      empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // modifiers:
    cursor    insert(const_cursor position, const T&);
    cursor    insert(const_cursor position, T&&);
    template <class InputCursor>
      cursor  insert(const_cursor position, InputCursor subtree);
    void      rotate(const_cursor position);
    void      swap(binary_tree&);
    void      clear(cursor position);
    void      clear();
  };

  template <class T, class Allocator>
    bool operator==(  const binary_tree<T, Allocator>& x,
                      const binary_tree<T, Allocator>& y);
  template <class T, class Allocator>
    bool operator!=(  const binary_tree<T, Allocator>& x,
                      const binary_tree<T, Allocator>& y);

  // specialized algorithms:
  template <class T, class Allocator>
    void swap(  binary_tree<T, Allocator>& x,
                binary_tree<T, Allocator>& y);
              
  namespace inorder {
  template <class T, class Allocator>
    inorder::iterator<binary_tree<T, Allocator>::cursor>
      begin(binary_tree<T, Allocator>& h);
  template <class T, class Allocator>
    inorder::iterator<binary_tree<T, Allocator>::const_cursor>
      cbegin(const binary_tree<T, Allocator>& h);
  } // namespace inorder
  
} // namespace std
``

[endsect] [/overview]

[section:types =binary_tree= types [label bintree.types]]

[std_def]
``
	typedef implementation_defined cursor;
	typedef implementation_defined const_cursor;
``
[std_end]

[std_req]
Both =cursor= and =const_cursor= have to fulfill the multiway cursor
(\[cursor.flavors\]) and ascending random access cursor
(\[ascending.random.access.cursors\]) requirements.
[std_end]

[std_req]
Additionally, for any instance a of either type =cursor= or
=const_cursor=, =a.max_size() == 1=.
[std_end]

[endsect] [/types]


[section:cons =binary_tree= constructors, copy, and assignment [label bintree.cons]]

[std_def]
``
	explicit binary_tree (const Allocator& = Allocator());
	template <class InputCursor>
	  binary_tree (InputCursor subtree,
	    const Allocator& = Allocator());
	binary_tree (const binary_tree& x);
``
[std_end]

[std_spec]
/Complexity:/ The constructor
`template <class InputCursor> binary_tree(InputCursor subtree)` makes only
=N= calls to the copy constructor of =T= (where =N= is the number of elements
in =subtree=) and no reallocations if the cursor =subtree= is of (either
descending or ascending) forward, bidirectional, or random access categories.
It does at most =2N= calls to the copy constructor of =T= and =logN=
reallocations if they are just cursors, since it is impossible to determine
the size of =subtree= and then do copying.
[std_end]

[std_def]
``
template <class InputCursor>
  void assign(InputCursor subtree);
``
[std_end]

[std_spec]
/Effects:/
``
	clear();
	for(auto v : subtree) insert(root().end(), v);
``
[std_end]

[endsect] [/cons]


[section:cursors =binary_tree= cursors [label bintree.cursors]]

[std_def]
``
	cursor        shoot();
	const_cursor  shoot() const;
	const_cursor  cshoot() const;
``
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[std_def]
``
	cursor        inorder_first();
	const_cursor  inorder_first() const;
	const_cursor  inorder_cfirst() const;
``
[std_end]

[std_spec]
/Returns:/ A cursor to the =binary_tree='s first element in inorder
(see \[order.iterators\]).
[std_end]

[std_spec]
/Complexity:/ constant.
[std_end]

[endsect] [/cursors]


[section:modifiers =binary_tree= modifiers [label bintree.modifiers]]

[std_def]
``
	cursor insert(cursor position, const T& x);
	cursor insert(const_cursor position, T&& x);
``
[std_end]

[std_spec]
/Notes:/ Does not affect the validity of cursors and references.
[std_end]

[std_spec]
/Effect:/ Let =parent= be =position='s parent;
if `parent.size() < parent.max_size()`, insert a copy of =x= before =position=,
as child of =parent=;
Otherwise, if `position.empty()`, insert a copy of =x= as child of =position=;
and if `!position.empty()`, insert a copy of =x= as parent of =position='s current
child, as new child of =position=.
[std_end]

[std_spec]
Complexity: constant
[std_end]

[std_def]
``
	template <class InputCursor>
	  cursor insert(cursor position, InputCursor subtree);
``
[std_end]

[std_spec]
/Notes:/ Does not affect the validity of cursors and references.
[std_end]

[std_spec]
/Effects:/ as above, substituting =InputCursor subtree= to insert instead
of `const T& x`.
[std_end]

[std_spec]
/Complexity:/ linear in the number of elements in subtree.
[std_end]


[std_def]
``
	void rotate(cursor position);
``
[std_end]

[std_spec]
/Precondition:/ =position= and its parent are internal and non-on-top
[std_end]

[std_spec]
/Effects:/ Performs a left tree rotation around the parent of =position= if
`position.parity() == 0` or a right tree rotation if `position.parity() == 1`.
[std_end]

[std_spec]
/Postcondition:/ If `par == position.parity()` as of before the rotation,
then, after the rotation:

[itemized_list
	[`*position.begin()` yields the same value it yielded before the rotation]
	[`position.parity() == !par`]
	[`*(((position.begin())[par]).begin())` yields what `*(p.begin())` yielded
before, if =p= was =position='s parent]
	[=position='s parent's value is what =position='s parent's parent's value
yielded before. The ancestors of that cursor, and their structure, remain
unchanged]
	[`(position.begin())[!par]`'s subtree is what `(position.begin())[!par]`'s
was before.]
	[`((position.begin()[!par]).begin())\[par]`'s subtree is what
`(p.begin())[!par]`'s was before, if =p= was =position='s parent.]
	[`((position.begin()[!par]).begin())[par]`'s subtree is what
`(position.begin())[!par]`'s was before.]
]
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[std_spec]
/Notes:/ Does not affect the validity of cursors and references. Tree
rotations are important inorder-preserving (see \[order.iterators\])
operations on binary trees that are especially required by balancers.
[std_end]

[std_def]
``
	void clear(cursor position);
``
[std_end]

[std_spec]
/Notes:/ Invalidates only the cursors and references to the erased elements.
[std_end]

[endsect] [/modifiers]


[section:special =binary_tree= specialized algorithms [label bintree.special]]

[std_def]
``
    template <class T, class Allocator>
      void swap(  binary_tree<T, Allocator>& x,
                  binary_tree<T, Allocator>& y);
``
[std_end]

[std_spec]
/Effects:/ `x.swap(y)`;
[std_end]

[std_def]
``
    namespace inorder {
      template <class T, class Allocator>
        inorder::iterator<binary_tree<T, Allocator>::cursor>
          begin(binary_tree<T, Allocator>& h);
    } // namespace inorder
``
[std_end]

[std_spec]
/Returns:/ `inorder::iterator<binary_tree<T, Allocator>::cursor>(h.inorder_first())`.
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[std_def]
``
    namespace inorder {
      template <class T, class Allocator>
        inorder::iterator<binary_tree<T, Allocator>::const_cursor>
          cbegin(binary_tree<T, Allocator> const& h);
    } // namespace inorder
``
[std_end]

[std_spec]
/Returns:/ `inorder::iterator<binary_tree<T, Allocator>::const_cursor>(h.inorder_cfirst())`.
[std_end]

[std_spec]
/Complexity:/ constant
[std_end]

[endsect] [/special]


[endsect] [/bintree]
