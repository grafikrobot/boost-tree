[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2012, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:balance Balancing hierarchy adaptors [label hierarchy.balance]]

[section:general In general [label balance.general]]

[note These do not model AssociativeContainer yet but Sequence as they
permit insertion in arbitrary positions. (This way, they are not required to
take care of extracting, sorting and searching.)]

A balancing hierarchy adaptor uses some kind of balancing method in order to
guarantee logarithmic time complexity for many important operations while
keeping the inorder of the adaptee hierarchy as its invariant.

A balancing hierarchy adaptor satisfies all of the requirements of a
container ([container.requirements]), of a sequence
([sequence.reqmts]), with the exception that its =erase()= member
functions return =void=, and most of the optional sequence requirements,
except for the =operator[]= and =at= member functions, which are not provided.
If the adaptee hierarchy supports at least descending bidirectional cursors,
it also satisfies the requirements of a reversible container. Descriptions are
provided here only for operations on balancing hierarchy adaptors that are not
described in one of these tables or for operations where there is additional
semantic information.

The library provides four balancing hierarchy adaptor template classes which
take a mutable multiway template parameter that provides a =rotate()= operation
and whose =cursor= and =const_cursor= types satisfy the requirements of a
binary tree cursor ([bintree.types]): =avl_tree=, =red_black_tree=,
=splay_tree=, and =treap=. Furthermore, two balancing hierarchy adaptor
template classes that take a mutable multiway tree template parameter are
provided: =b_tree= and =b_star_tree=. All balancing adaptors and corresponding
free functions are found in header =<balance>=.

In the following, only the template class =avl_tree= and related operators
are shown. Note that also =red_black_tree=, =splay_tree=, and =treap= must
be present and have identical interfaces (with all occurrences of =avl_tree=
replaced accordingly). The same holds true for =b_tree= and =b_star_tree=, as
well, except that the standard value for the template parameter reads
=multiway_tree<T>= (instead of =binary_tree<T>=) in their case.

[endsect] [/general]

[section:syn Header =<balance>= synopsis [label balance.syn]]

``
#include <initializer_list>

namespace std {

  template <class T, class Hierarchy = binary_tree<T> > class avl_tree;
  template <class T, class Hierarchy = binary_tree<T> > class red_black_tree;
  template <class T, class Hierarchy = binary_tree<T> > class splay_tree;
  template <class T, class Hierarchy = binary_tree<T> > class treap;
  template <class T, class Hierarchy = multiway_tree<T> > class b_tree;
  template <class T, class Hierarchy = multiway_tree<T> > class b_star_tree;
  
  template <class T, class Hierarchy>
    bool operator==(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator< (const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator> (const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator>=(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator<=(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);

  template <class T, class Hierarchy>
    void swap(avl_tree<T, Hierarchy>&, avl_tree<T, Hierarchy>&);
  
  template <class T, class Hierarchy>
    bool operator==(const red_black_tree<T, Hierarchy> const&, const red_black_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator< (const red_black_tree<T, Hierarchy> const&, const red_black_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const red_black_tree<T, Hierarchy> const&, const red_black_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator> (const red_black_tree<T, Hierarchy> const&, const red_black_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator>=(const red_black_tree<T, Hierarchy> const&, const red_black_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator<=(const red_black_tree<T, Hierarchy> const&, const red_black_tree<T, Hierarchy>&);

  template <class T, class Hierarchy>
    void swap(red_black_tree<T, Hierarchy>&, red_black_tree<T, Hierarchy>&);
  
  template <class T, class Hierarchy>
    bool operator==(const splay_tree<T, Hierarchy> const&, const splay_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator< (const splay_tree<T, Hierarchy> const&, const splay_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const splay_tree<T, Hierarchy> const&, const splay_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator> (const splay_tree<T, Hierarchy> const&, const splay_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator>=(const splay_tree<T, Hierarchy> const&, const splay_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator<=(const splay_tree<T, Hierarchy> const&, const splay_tree<T, Hierarchy>&);

  template <class T, class Hierarchy>
    void swap(splay_tree<T, Hierarchy>&, splay_tree<T, Hierarchy>&);
  
  template <class T, class Hierarchy>
    bool operator==(const treap<T, Hierarchy> const&, const treap<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator< (const treap<T, Hierarchy> const&, const treap<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const treap<T, Hierarchy> const&, const treap<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator> (const treap<T, Hierarchy> const&, const treap<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator>=(const treap<T, Hierarchy> const&, const treap<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator<=(const treap<T, Hierarchy> const&, const treap<T, Hierarchy>&);

  // specialized algorithms:
  template <class T, class Hierarchy>
    void swap(treap<T, Hierarchy>&, treap<T, Hierarchy>&);

} // namespace std
``

[endsect] [/syn]

[section:avltree Class template =avl_tree= [label avltree]]

[section:defn =avl_tree= definition [label avltree.defn]]

``
namespace std {
  template <class T, class Hierarchy = binary_tree<T> >
  class avl_tree {
  public:
    typedef Hierarchy                                     hierarchy_type;

  protected:
    hierarchy_type h;
    
  public:
    // types:
    typedef typename hierarchy_type::reference            reference;
    typedef typename hierarchy_type::const_reference      const_reference;
    typedef implementation_defined                        iterator;
    typedef implementation_defined                        const_iterator;
    typedef typename hierarchy_type::size_type            size_type;
    typedef typename hierarchy_type::difference_type      difference_type;
    typedef typename hierarchy_type::value_type           value_type;
    typedef typename hierarchy_type::allocator_type       alocator_type;
    typedef typename hierarchy_type::pointer              pointer;
    typedef typename hierarchy_type::const_pointer        const_pointer;
    typedef std::reverse_iterator<iterator>               reverse_iterator;
    typedef std::reverse_iterator<const_iterator>         const_reverse_iterator;

    // construct/copy/destroy:
    explicit avl_tree(const Hierarchy&);
    explicit avl_tree(Hierarchy&& = Hierarchy());
    avl_tree(size_type n, const Hierarchy&);
    avl_tree(size_type n, Hierarchy&& = Hierarchy());
    avl_tree(size_type n, const T& value, const Hierarchy&);
    avl_tree(size_type n, const T& value, Hierarchy&& = Hierarchy());
    template <class InputIterator>
      avl_tree(InputIterator first, InputIterator last,
        Hierarchy const& = Hierarchy());
    avl_tree(const avl_tree<T,Hierarchy>&);
    avl_tree(avl_tree&&);
    avl_tree(initializer_list<T>);
    avl_tree<T,Hierarchy>& operator=(const avl_tree<T,Hierarchy>&);
    avl_tree<T,Hierarchy>& operator=(avl_tree<T,Hierarchy>&&);
    avl_tree& operator=(initializer_list<T>);
    template <class InputIterator>
      void assign(InputIterator first, InputIterator last);
    void assign(size_type n, const T&);
    void assign(initializer_list<T>);

    // iterators:
    iterator                begin() noexcept;
    const_iterator          begin() const noexcept;
    iterator                end() noexcept{ return iterator(h.shoot()); }
    const_iterator          end() const noexcept { return const_iterator(h.cshoot()); }
    reverse_iterator        rbegin() noexcept;
    const_reverse_iterator  rbegin() const noexcept;
    reverse_iterator        rend() noexcept;
    const_reverse_iterator  rend() const noexcept;
    const_iterator          cbegin() const noexcept;
    const_iterator          cend() const noexcept { return const_iterator(h.cshoot()); }
    const_reverse_iterator  crbegin() const noexcept;
    const_reverse_iterator  crend() const noexcept;
    
    // capacity:
    size_type size() const noexcept { return h.size(); }
    size_type max_size() const noexcept;
    void      resize(size_type sz);
    void      resize(size_type sz, const T&);
    bool      empty() const noexcept { return h.empty(); }

    // element access:
    reference       front();
    const_reference front() const;
    reference       back();
    const_reference back() const;

    // modifiers:
    template <class... Args> void emplace_front(Args&&...);
    template <class... Args> void emplace_back(Args&&...);
    void push_front(const T&);
    void push_front(T&&);
    void push_back(const T&);
    void push_back(T&&);
    void pop_front();
    void pop_back();
    
    template <class... Args> iterator emplace(const_iterator position, Args&&);
    iterator insert(const_iterator position, const T&);
    iterator insert(const_iterator position, T&&);
    iterator insert(iterator position, size_type n, const T&);
    template <class InputIterator>
      iterator insert(const_iterator position, InputIterator first,
        InputIterator last);
    iterator insert(const_iterator position, initializer_list<T>);
    iterator erase(const_iterator position);
    iterator erase(const_iterator position, const_iterator last);
    void     swap(avl_tree<T, Hierarchy>&);
    void     clear() noexcept { h.clear(); }
  };
  
  template <class T, class Hierarchy>
    bool operator==(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator< (const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator> (const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator>=(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator<=(const avl_tree<T, Hierarchy> const&, const avl_tree<T, Hierarchy>&);

  // specialized algorithms:
  template <class T, class Hierarchy>
    void swap(avl_tree<T, Hierarchy>&, avl_tree<T, Hierarchy>&);
} // namespace std
``

[/endsect] [/defn]

[section:cons Balancing adaptor constructors, copy, and assigment [label balance.cons]]

[std_def]
``
	template <class InputIterator>
	  avl_tree(InputIterator first, InputIterator last,
	    Hierarchy const& = Hierarchy());
``
[std_end]

[std_spec]
/Effects:/ constructs a balanced tree equal to the range \[=first=, =last=).
[std_end]

[std_spec]
/Complexity:/ Linear.
[std_end]

[std_def]
``
	template <class InputIterator>
	  void assign(InputIterator first, InputIterator last);
``
[std_end]

[std_spec]
/Effects:/

``
clear(); 
while(first++ != last)
  insert(end(), *first);
``
[std_end]

[endsect] [/cons]


[section:modifiers Balancing adaptor modifiers [label balance.modifiers]]

[std_def]
``
    template <class... Args> void emplace_front(Args&&...);
    template <class... Args> void emplace_back(Args&&...);
    void push_front(const T&);
    void push_front(T&&);
    void push_back(const T&);
    void push_back(T&&);
    void pop_front();
    void pop_back();
    template <class... Args> iterator emplace(const_iterator position, Args&&);
    iterator insert(const_iterator position, const T&);
    iterator insert(const_iterator position, T&&);
    iterator insert(iterator position, size_type n, const T&);
    template <class InputIterator>
      iterator insert(const_iterator position, InputIterator first,
        InputIterator last);
    iterator insert(const_iterator position, initializer_list<T>);
``
[std_end]

[std_spec]
/Complexity:/ linear in the number of elements to insert when inserting
more than one element, otherwise amortized contant.
[std_end]

[std_def]
``
	void      erase(iterator first, iterator last);
``
[std_end]

[std_spec]
/Complexity:/ =log(size())+N= where =N= is the distance from =first= to =last=
[std_end]

[std_def]
``
	void      clear();
``
[std_end]

[std_spec]
/Complexity:/ =log(size())+N=
[std_end]

[endsect] [/modifiers]


[section:special Balancing adaptor specialized algorithms [label balance.special]]

[std_def]
``
	template <class T, class Hierarchy>
	  void swap(avl_tree<T, Hierarchy>&, avl_tree<T, Hierarchy>&);
``
[std_end]

[std_spec]
/Effects:/ `x.swap(y);`
[std_end]

[endsect] [/special]

[endsect] [/avltree]

[endsect] [/balance]
