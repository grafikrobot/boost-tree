[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2013, RenÃ© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[std_clause cursors..24.7..Cursors [label cursors]]

[note Add after subclause 24.7, Stream iterators ([stream.iterators]):]

Cursors provide a uniform way of applying algorithms to hierarchical data
structures. In order to also allow for algorithms relevant when dealing with
linear data structures, any cursor class is actually a refinement of a
corresponding iterator class.

If exactly one application of the expression `i = i.begin()`, followed by a
finite sequence of applications of the expression `++j` makes `i == j`, `j` is
a /child/ (or /immediate descendant/) of `i`, and `i` is the /parent/ (or the
/immediate ancestor/) of `j`. A cursor `j` is another cursor `i`'s descendant
if there is a finite sequential combination of applications of either of the
expressions `++i` and `i = i.begin()` that makes `i == j`; `i` is then called
`j`'s ancestor. If two cursors `i` and `j` share at least one common ancestor,
they refer to the same container. The descending traversal capabilities of a
class relate to the range of children of a given instance of that class.

In addition to a cursor's descending traversal tags, two of them are reused
to indicate a cursor's ascending traversal abilities, namely /forward/ and
/bidirectional/ traversal in order to indicate whether a given cursor provides
traversal to the parent.

Apart from cursors that are /past-the-end/ (like their iterator counterparts
can be), the notion of a cursor /on-top/ is introduced, denoting a cursor that
is ancestor to all other cursors within a hierarchy; and just as
for past-the-end ones, the library generally does not assume on-top cursors be
dereferenceable.

A cursor `c` for which `c.emtpy() == true` is called a /leaf cursor/. A leaf
cursor's children are never assumed to be dereferenceable. A cursor which is
either on-top or a descendant of an on-top cursor, but in either case not a
leaf cursor, nor a descendant of a leaf cursor, is called an /internal cursor/.

A cursor, like an iterator, can have a singular value that is not associated
with any hierarchy, meaning that most expressions are undefined for it, with
the exception of assignment of a non-singular value to a cursor that holds a
singular value. The children of a leaf cursor's child are never assumed to be
non-singular; nor is the parent of an on-top node.

Like for iterators, the Standard defines a number of categories of cursors
according to the operations defined on them: /cursor/, /descending cursor/,
/descending forward cursor/, /descending bidirectional cursor/, /descending
random access cursor/, /ascending cursor/, /ascending forward cursor/,
/ascending bidirectional/ , and /ascending random access cursor/. The cursors
of any /ascending/ category generally support all the operations of their
/descending/ counterpart, plus a method to obtain their parent; relations
between the /forward/, /bidirectional/ and /random access/ parts are as for
iterators of those categories.

In the following sections =X= denotes a cursor over values of type =T=,
=a= and =b= denotes an identifier, =r= denotes a value of =T&= and =t= denotes
a value of type =T=.

[section:cursor_requirements Cursor requirements [label cursor.requirements]]

[std_req]
A class =X= satisfies the requirements of a cursor if the following
expressions are valid, as shown in Table 8, in addition to satisfying the
requirements of input iterators (\[input.iterators\]) and output
iterators (\[output.iterators\]):

[table:table8
	Cursor requirements (in addition to input and output iterators)

	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note [br] pre/post-condition ]
	]
	
	[
	[ =X::value_type= ]
	[ =T= ]
	[ Any non-reference, non-cv-qualified type ]
	[ compile time ]
	]
	
	[
	[ =X::type= ]
	[ Convertible to =cursor_tag=, =input_iterator_tag=, and =output_iterator_tag= ]
	[  ]
	[ compile time ]
	]
	
	[
	[ =X::cursor= ]
	[ Convertible to =X= ]
	[  ]
	[ compile time ]
	]
	
	[
	[ =X::const_cursor= ]
	[ Convertible to =const X= ]
	[  ]
	[ compile time ]
	]
]
[std_end]

[section:descending Descending Cursor [label descending.cursors]]

[std_req]
A class =X= satisfies the requirements of a descending cursor if, in
addition to satisfying the requirements for cursors (\[cursor.requirements\])
it also conforms to the container requirements (\[container.requirements\])
with the exception of the following expressions:

[table:table9
	Container requirements that are not supported
	[ [ unsupported expression ] ]
	[ [ `X::iterator` ] ]
	[ [ `X::const_iterator` ] ]
	[ [ `X::reverse_iterator` ] ]
	[ [ `X::reverse_const_iterator` ] ]
	[ [ `(&a)->~X();` ] ]
	[ [ `X(a);` ] ]
	[ [ `X u(a);` ] ]
	[ [ `X u = a;` ] ]
	[ [ `a.begin()` ] ]
	[ [ `a.end()` ] ]
	[ [ `a.rbegin()` ] ]
	[ [ `a.rend()` ] ]
	[ [ `a == b` ] ]
	[ [ `a != b` ] ]
	[ [ `a.swap(b)` ] ]
	[ [ `r = a` ] ]
	[ [ `a < b` ] ]
	[ [ `a > b` ] ]
	[ [ `a <= b` ] ]
	[ [ `a >= b` ] ]
]

Notes: The expressions =a.begin()= and =a.end()= are, as shown in Table 9,
replaced with equivalent expressions for cursors.
[std_end]

[std_req]
Additionally, for a descending cursor, the following expression are valid, as
shown in Table 10:

[table:table10
	Descending cursor requirements (in addition to cursor)

	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note [br] pre/post-condition ]
	]
	
	[
	[ =X::type= ]
	[ Convertible to =descending_cursor_tag= ]
	[  ]
	[ compile time ]
	]
	
	[
	[ =a.begin()= ]
	[ =cursor= or =const_cursor= for constant =a= ]
	[ pre: =a= is non-leaf. ]
	[ constant ]
	]
	
	[
	[ =a.end()= ]
	[ =cursor= or =const_cursor= for constant =a= ]
	[ pre: =a= is non-leaf. ]
	[ constant ]
	]
	
	[
	[ =a.cbegin()= ]
	[ =const_cursor= ]
	[ pre: =a= is non-leaf. ]
	[ constant ]
	]
	
	[
	[ =a.cend()= ]
	[ =const_cursor= ]
	[ pre: =a= is non-leaf. ]
	[ constant ]
	]
	
	[
	[ =a.parity()= ]
	[ =size_type= ]
	[ =std::distance(b.begin(), a)= if =b= is =a='s parent.
		[br] pre: =a= is non-on-top. ]
	[ Linear in =b.size()= ]
	]
]
[std_end]

[endsect] [/descending]

[section:descending_forward Descending Forward Cursor [label descending.forward.cursors]]

A class type =X= satisfies the requirements of a descending forward cursor if
the following expressions are valid, as shown in Table 11, in addition to the
requirements of descending cursors (\[descending.cursors\]) and forward
iterators (\[forward.iterators\]):

[table:table11
	Descending forward cursor requirements (in addition to
	descending cursors and forward iterators)

	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note [br] pre/post-condition ]
	]
	
	[
	[ =X::type= ]
	[ Convertible to =descending_forward_cursor_tag= and
	=forward_iterator_tag= ]
	[  ]
	[ compile time ]
	]
]

[endsect] [/descending_forward]

[section:descending_bidirectional Descending Bidirectional Cursor [label descending.bidirectional.cursors]]

A class type =X= satisfies the requirements of a descending bidirectional
cursor if the following expressions are valid, as shown in Table 12, in
addition to satisfying the requirements for descending forward cursors
(\[descending.forward.cursors\]) and bidirectional iterators
(\[bidirectional.iterators\]):

[table:table12
	Descending bidirectional cursor requirements (in addition to
	forward descending cursors and bidirectional iterators)

	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note [br] pre/post-condition ]
	]
	
	[
	[ `X::type` ]
	[ Convertible to =descending_bidirectional_cursor_tag= and
	=bidirectional_iterator_tag= ]
	[  ]
	[ compile time ]
	]
]

[note
	rbegin() and rend() do not seem very useful for multiway trees, as they
	hide end() and its possible children. Are different semantics or maybe
	having rend() stand in for end() sensible solutions? Or just ignore this
	aspect?
]

[endsect] [/descending_bidirectional]

[section:descending_random_access Descending Random Access Cursor [label descending.random.access.cursors]]

A class type =X= satisfies the requirements of a descending random access
cursor if the following expressions are valid, as shown in Table 13, in
addition to satisfying the requirements for descending bidirectional cursors
(\[descending.bidirectional.cursors\]) and random access iterators
(\[random.access.iterators\]):

[table:table13
	Descending random access cursor requirements (in addition to
	descending bidirectional cursors and random access iterators)

	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note [br] pre/post-condition ]
	]
	
	[
	[ `X::type` ]
	[ Convertible to =descending_random_access_cursor_tag= and
	=random_access_iterator_tag= ]
	[  ]
	[ compile time ]
	]
]

[endsect] [/descending_random_access]

[section:ascending Ascending Cursor [label ascending.cursors]]

[std_req]
A class type =X= satisfies the requirements of an ascending cursor if the
following expressions are valid, as shown in Table 14, in addition to
satisfying the requirements for descending cursors ([descending.cursors]):

[table:table14
	Ascending cursor requirements (in addition to descending cursors)

	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note[br]pre/post-condition ]
	]
	
	[
	[ `X::type` ]
	[ Convertible to =ascending_cursor_tag= ]
	[  ]
	[ compile time ]
	]
	
	[
	[ `a.parent()` ]
	[ =cursor=; =const_cursor= for a constant =a= ]
	[  ]
	[ (Note A) ]
	]
	
	[
	[ `!r` ]
	[ `X&` ]
	[ `r = r.parent();` ]
	[ pre: =r= is an internal, non-on-top cursor. [br]
		post: =r= is internal. [br]
		`r == s` and `r` is internal and non-on-top implies `!r == !s`. [br]
		`&r == &!r` [br]
		(Note A) ]
	]
]

/Notes:/ Those entries marked "(Note A)" should have at worst linear complexity.
See the individual hierarchy containers for specific complexity.
[std_end]

[endsect] [/ascending]

[section:ascending_forward Ascending Forward Cursor [label ascending.forward.cursors]]

A class type =X= satisfies the requirements of an ascending forward cursor if
the following expressions are valid, as shown in Table 15, in addition to
satisfying the requirements for ascending cursors ([ascending.cursors]) and
descending forward cursors ([descending.forward.cursors]):

[table:table15
	Ascending forward cursor requirements (in addition to ascending
	cursors and descending forward cursors)
	
	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note[br]pre/post-condition ]
	]
	
	[
	[ =X::type= ]
	[ Convertible to =ascending_forward_cursor_tag= ]
	[  ]
	[ compile time ]
	]
]

[endsect] [/ascending_forward]

[section:ascending_bidirectional Ascending Bidirectional Cursor [label ascending.bidirectional.cursors]]

A class type =X= satisfies the requirements of an ascending bidirectional
cursor if the following expressions are valid, as shown in Table 16, in
addition to satisfying the requirements of ascending forward cursors
([ascending.forward.cursors]) and descending bidirectional cursors
([descending.bidirectional.cursors]):

[table:table16
	Ascending bidirectional cursor requirements (in addition to
	ascending forward cursors and descending bidirectional cursors)
	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note[br]pre/post-condition ]
	]
	
	[
	[ =X::type= ]
	[ Convertible to =ascending_bidirectional_cursor_tag= ]
	[  ]
	[ compile time ]
	]
]

[endsect] [/ascending_bidirectional]

[section:ascending_random_access Ascending Random Access Cursor [label ascending.random.access.cursors]]

A class type =X= satisfies the requirements of an ascending random access
cursor if the following expressions are valid, as shown in Table 17, in
addition to satisfying the requirements for ascending bidirectional cursors
([ascending.bidirectional.cursors]) and descending random access cursors
([descending.random.access.cursors]):

[table:table17
	Ascending random access cursor requirements (in addition to ascending bidirectional cursors and descending random access cursors)
	[
	[ expression ]
	[ return type ]
	[ operational semantics ]
	[ assertion/note[br]pre/post-condition ]
	]
	
	[
	[ =X::type= ]
	[ Convertible to =ascending_random_access_cursor_tag= ]
	[  ]
	[ compile time ]
	]
]

[endsect] [/ascending_random_access]

[endsect] [/cursor_requirements]

[section:cursor_flavors Cursor flavors [label cursor.flavors]]

A cursor that satisfies at least the descending cursor requirements
([descending.cursors]) can be either a /plain cursor/ or a /multiway cursor/.
If the expressions =a.begin()=, =a.cbegin()=, =a.end()= and =a.cend()= are
valid for any internal cursor =a= of type =X=, except for past-the-end ones,
=X= satisfies the /plain cursor/ requirements. If those expressions are valid
for any internal cursor /including/ past-the-end ones, =X= satisfies the
/multiway cursor/ requirements.

[endsect] [/cursor_flavors]

[section:cursor_synopsis Header =<cursor>= synopsis [label cursor.synopsis]]

``
namespace std {
  // 24.7.4, cursor primitives
  template <class Cursor> struct cursor_value;
  template <class Cursor> struct cursor_reference;
  template <class Cursor> struct cursor_const_reference;
  template <class Cursor> struct cursor_pointer;
  template <class Cursor> struct cursor_difference;
  template <class Cursor> struct cursor_size;
  template <class Cursor> struct cursor_category;

  template <class Category, class T, class Distance = ptrdiff_t,
            class Size = size_t, class Pointer = T*,
            class Reference = T&> struct cursor;

  struct cursor_tag 
    : public input_iterator_tag, public output_iterator_tag {};
  struct descending_cursor_tag
    : public cursor_tag {};
  struct descending_forward_cursor_tag
    : public descending_cursor_tag, public forward_iterator_tag {};
  struct descending_bidirectional_cursor_tag
    : public descending_cursor_tag, public bidirectional_iterator_tag {};
  struct descending_random_access_cursor_tag
    : public descending_cursor_tag, public random_access_iterator_tag {};
  struct ascending_cursor_tag
        : public descending_cursor_tag {};
  struct ascending_forward_cursor_tag
    : public descending_forward_cursor_tag {};
  struct ascending_bidirectional_cursor_tag
    : public descending_bidirectional_cursor_tag {};
  struct ascending_random_access_cursor_tag
    : public descending_random_access_cursor_tag {};
} // namespace std
``

[endsect] [/cursor_synopsis]

[section:cursor_primitives Cursor primitives [label cursor.primitives]]

To simplify the task of defining cursors, the library provides several
classes and functions:

[section:cursor_traits Cursor traits [label cursor.traits]]

The following classes are required to be defined appropriately for a cursor of
type =Cursor=:

``
template <class Cursor> struct cursor_value {
  typedef typename Cursor::value_type type;
};

template <class Cursor> struct cursor_reference {
  typedef typename Cursor::reference type;
};

template <class Cursor> struct cursor_const_reference {
  typedef typename Cursor::const_reference type;
};

template <class Cursor> struct cursor_pointer {
  typedef typename Cursor::pointer type;
};

template <class Cursor> struct cursor_difference {
  typedef typename Cursor::difference_type type;
};

template <class Cursor> struct cursor_size {
  typedef typename Cursor::size_type type;
};

template <class Cursor> struct cursor_category {
  typedef typename Cursor::cursor_category type;
};
``

[endsect] [/cursor_traits]

[section:cursor_basic Basic cursor [label cursor.basic]]

The =cursor= template may be used as a base class to ease the definition of
required types for new cursors.

``
namespace std {
  template <class Category, class T, class Distance = ptrdiff_t,
            class Size = size_t, class Pointer = T*,
            class Reference = T&>
  struct cursor {
    typedef Category  cursor_category;
    typedef T         value_type;
    typedef Distance  difference_type;
    typedef Size      size_type;
    typedef Pointer   pointer;
    typedef Reference reference;
  };
} // namespace std
``

[endsect] [/cursor_basic]

[section:cursor_tags Standard cursor tags [label cursor.tags]]

Cursor tags pick up the notion of iterator tags (\[std.iterator.tags\]) and
extend them by adding information about a given cursor class' descending or
ascending traversal capabilities (\[cursor.requirements\]). This yields the
cursor tags =cursor_tag=, =descending_cursor_tag=,
=descending_forward_cursor_tag=, =descending_bidirectional_cursor_tag=,
=descending_random_access_cursor_tag=, =ascending_cursor_tag=,
=ascending_forward_cursor_tag=, =ascending_bidirectional_cursor_tag= and
=ascending_random_access_cursor_tag=. For every cursor of type =Cursor=,
=cursor_category<Cursor>::type= must be defined to be the most specific
category tag that describes the cursor's behavior.

``
namespace std {
  struct cursor_tag 
    : public input_iterator_tag, public output_iterator_tag {};
  struct descending_cursor_tag
    : public cursor_tag {};
  struct descending_forward_cursor_tag
    : public descending_cursor_tag, public forward_iterator_tag {};
  struct descending_bidirectional_cursor_tag
    : public descending_cursor_tag, public bidirectional_iterator_tag {};
  struct descending_random_access_cursor_tag
    : public descending_cursor_tag, public random_access_iterator_tag {};
  struct ascending_cursor_tag
        : public descending_cursor_tag {};
  struct ascending_forward_cursor_tag
    : public descending_forward_cursor_tag {};
  struct ascending_bidirectional_cursor_tag
    : public descending_bidirectional_cursor_tag {};
  struct ascending_random_access_cursor_tag
    : public descending_random_access_cursor_tag {};
} // namespace std
``

[endsect] [/cursor_tags]

[endsect] [/cursor_primitives]

[std_endclause cursors]
