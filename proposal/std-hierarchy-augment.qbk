[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2013, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:augment Augmenting hierarchy adaptors [label hierarchy.augment]]

[section:general In general [label hierarchy.augment.general]]

An augmenting hierarchy "augments" a mutable multiway hierarchy which it is
given as a template parameter by associating additional information with its
elements and modeling a mutable multiway hierarchy in turn. This additional
information is not directly exposed, but only readable via certain member
functions of the augmentor; it is updated internally in order to adapt to
structural or content-wise changes in the hierarchy. The library provides
one augmenting hierarchy adaptor template class: =rank_tree=, found in
header =<rank_tree>=.

[*Header =<rank_tree>= synopsis]

``
#include <initializer_list>

namespace std {

  template <class T, class Hierarchy = binary_tree<T> > class rank_tree;

  template <class T, class Hierarchy>
    bool operator==(const rank_tree<T, Hierarchy>&, const rank_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const rank_tree<T, Hierarchy>&, const rank_tree<T, Hierarchy>&);

  template <class T, class Hierarchy>
    void swap(rank_tree<T, Hierarchy>&, rank_tree<T, Hierarchy>&);

} // namespace std
``

[endsect] [/general]

[section:ranktree Class template =rank_tree= [label ranktree]]

[section:defn =rank_tree= definition [label ranktree.defn]]

``
namespace std {
  template <class T, class Hierarchy = binary_tree<T> >
  class rank_tree
  {
  public:
    typedef Hierarchy                                     hierarchy_type;

  protected:
    typename hierarchy_type::template rebind< pair<T,size_t> >::other
      rank_tree_type;
  
  public:
    // types:
    typedef typename hierarchy_type::reference            reference;
    typedef typename hierarchy_type::const_reference      const_reference;
    typedef implementation_defined                        cursor;
    typedef implementation_defined                        const_cursor;
    typedef typename hierarchy_type::size_type            size_type;
    typedef typename hierarchy_type::difference_type      difference_type;
    typedef T                                             value_type;
    typedef typename hierarchy_type::pointer              pointer;
    typedef typename hierarchy_type::const_pointer        const_pointer;

    template <class U> struct rebind {
      typedef rank_tree< U, typename hierarchy_type::template rebind<U>::other >
        other;
    };

    // construct/copy/destroy:
    template <class InputCursor> rank_tree(InputCursor subtree);
    rank_tree(const rank_tree&);
    rank_tree(rank_tree&&);
    rank_tree& operator=(const rank_tree&);
    rank_tree& operator=(rank_tree&&);
    template <class InputCursor> void assign(InputCursor subtree);

    // cursors:
    cursor        root() noexcept;
    const_cursor  root() const noexcept;
    const_cursor  croot() const noexcept;
    cursor        shoot() noexcept;
    const_cursor  shoot() const noexcept;
    const_cursor  cshoot() const noexcept;

    cursor        rank(size_type n);
    const_cursor  rank(size_type n) const;

    // capacity:
    bool      empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // modifiers:
    cursor    insert(cursor position, const T&);
    cursor    insert(cursor position, T&& = T());
    template <class InputCursor>
      cursor  insert(cursor position, InputCursor subtree);
    void      rotate(cursor position);
    void      swap(rank_tree&);
    void      clear(cursor position);
    void      clear();
  };

  template <class T, class Hierarchy>
    bool operator==(const rank_tree<T, Hierarchy>&, const rank_tree<T, Hierarchy>&);
  template <class T, class Hierarchy>
    bool operator!=(const rank_tree<T, Hierarchy>&, const rank_tree<T, Hierarchy>&);

  // specialized algorithms:
  template <class T, class Hierarchy>
    void swap(rank_tree<T, Hierarchy>&, rank_tree<T, Hierarchy>&);
  
} // namespace std
``

Each function listed in the public interface of =rank_tree= as above calls a
function of the same name for its adaptee object =h=, plus possibly other
operations with guaranteed logarithmic time complexity in total.
This means that operational semantics and time complexities are as specified
by the =hierarchy_type=; and that a function can only be called if a
function of the same name is present in the public interface of =hierarchy_type=.
(The only exception to the above stated are the functions =rank()=,
which are newly introduced.)

[endsect] [/defn]

[section:cursors =rank_tree= cursors [label ranktree.cursors]]

[std_def]
``
	cursor        rank(size_type n);
	const_cursor  rank(size_type n) const;
``
[std_end]

[std_spec]
/Returns:/ A cursor (or =const_cursor=) to the =n=th element of the hierarchy
in inorder, counting from =inorder::begin(h)=.
[std_end]

[std_spec]
/Complexity:/ logarithmic in =size()=.
[std_end]

[endsect] [/cursors]

[endsect] [/ranktree]

[endsect] [/augment]
